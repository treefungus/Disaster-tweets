{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"jupyter":{"source_hidden":true},"execution":{"iopub.status.busy":"2025-01-06T20:41:45.623744Z","iopub.execute_input":"2025-01-06T20:41:45.624143Z","iopub.status.idle":"2025-01-06T20:41:45.632717Z","shell.execute_reply.started":"2025-01-06T20:41:45.624114Z","shell.execute_reply":"2025-01-06T20:41:45.631436Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/nlp-getting-started/sample_submission.csv\n/kaggle/input/nlp-getting-started/train.csv\n/kaggle/input/nlp-getting-started/test.csv\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"## Predicting Disaster Tweets\n\nThis is my next attempt to predict which tweets regard an actual disaster and which do not in the [competition](https://www.kaggle.com/competitions/nlp-getting-started).\n\nThis time applying modest neural model.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import TextVectorization\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/nlp-getting-started/test.csv\")\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.634202Z","iopub.execute_input":"2025-01-06T20:41:45.634520Z","iopub.status.idle":"2025-01-06T20:41:45.692906Z","shell.execute_reply.started":"2025-01-06T20:41:45.634492Z","shell.execute_reply":"2025-01-06T20:41:45.691895Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"data.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.694656Z","iopub.execute_input":"2025-01-06T20:41:45.695025Z","iopub.status.idle":"2025-01-06T20:41:45.705420Z","shell.execute_reply.started":"2025-01-06T20:41:45.694995Z","shell.execute_reply":"2025-01-06T20:41:45.703949Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"id             0\nkeyword       61\nlocation    2533\ntext           0\ntarget         0\ndtype: int64"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.707287Z","iopub.execute_input":"2025-01-06T20:41:45.707624Z","iopub.status.idle":"2025-01-06T20:41:45.725424Z","shell.execute_reply.started":"2025-01-06T20:41:45.707594Z","shell.execute_reply":"2025-01-06T20:41:45.724236Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(7613, 5)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"df = data[[\"text\", \"target\"]]\ndf_test = test_data[\"text\"]\n\ndf.info","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.726558Z","iopub.execute_input":"2025-01-06T20:41:45.726975Z","iopub.status.idle":"2025-01-06T20:41:45.752535Z","shell.execute_reply.started":"2025-01-06T20:41:45.726944Z","shell.execute_reply":"2025-01-06T20:41:45.750949Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"<bound method DataFrame.info of                                                    text  target\n0     Our Deeds are the Reason of this #earthquake M...       1\n1                Forest fire near La Ronge Sask. Canada       1\n2     All residents asked to 'shelter in place' are ...       1\n3     13,000 people receive #wildfires evacuation or...       1\n4     Just got sent this photo from Ruby #Alaska as ...       1\n...                                                 ...     ...\n7608  Two giant cranes holding a bridge collapse int...       1\n7609  @aria_ahrary @TheTawniest The out of control w...       1\n7610  M1.94 [01:04 UTC]?5km S of Volcano Hawaii. htt...       1\n7611  Police investigating after an e-bike collided ...       1\n7612  The Latest: More Homes Razed by Northern Calif...       1\n\n[7613 rows x 2 columns]>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# Splitting the data to training, validation and testing sets\nX = df[\"text\"]\ny = df[\"target\"]\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)\nX_test = df_test\n\n# Adapting the vectorizer on training data only\ntext_data_train = np.array(X_train)\n\nvectorizer = TextVectorization(max_tokens=10000, output_mode='int', output_sequence_length=10)\nvectorizer.adapt(text_data_train)\n\n# Creating vectors for training, validation and testing text strings\ndef vectorize(data, vectorizer):\n    return vectorizer(np.array(data)).numpy()\n    \nX_train_vectorized = vectorizer(np.array(X_train)).numpy()\nX_valid_vectorized = vectorizer(np.array(X_valid)).numpy()\nX_test_vectorized = vectorizer(np.array(X_test)).numpy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.753649Z","iopub.execute_input":"2025-01-06T20:41:45.754150Z","iopub.status.idle":"2025-01-06T20:41:45.941973Z","shell.execute_reply.started":"2025-01-06T20:41:45.754108Z","shell.execute_reply":"2025-01-06T20:41:45.940516Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"## Apply neural model\n\nNow we have our strings vectorized, let's build basic neural model and let it chew.","metadata":{}},{"cell_type":"code","source":"early_stopping = keras.callbacks.EarlyStopping(\n    monitor='val_binary_accuracy',\n    patience=20,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\n\nmodel = keras.Sequential([\n    layers.Embedding(input_dim=10000, output_dim=256, input_shape=[1]),\n    layers.GlobalMaxPooling1D(),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(units=256, activation=\"relu\"),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(units=128, activation=\"relu\"),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(units=64, activation=\"relu\"),\n    layers.BatchNormalization(),\n    layers.Dense(units=1, activation=\"sigmoid\")\n])\n\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=[\"binary_accuracy\"]\n)\n\nmodel.fit(\n    X_train_vectorized, y_train,\n    validation_data=(X_valid_vectorized, y_valid),\n    batch_size=128,\n    epochs=100,\n    callbacks=[early_stopping]\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:41:45.943314Z","iopub.execute_input":"2025-01-06T20:41:45.943740Z","iopub.status.idle":"2025-01-06T20:42:34.414831Z","shell.execute_reply.started":"2025-01-06T20:41:45.943693Z","shell.execute_reply":"2025-01-06T20:42:34.413602Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 27ms/step - binary_accuracy: 0.5165 - loss: 0.7700 - val_binary_accuracy: 0.6108 - val_loss: 0.6918\nEpoch 2/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.6197 - loss: 0.6455 - val_binary_accuracy: 0.6539 - val_loss: 0.6836\nEpoch 3/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.7446 - loss: 0.5331 - val_binary_accuracy: 0.7600 - val_loss: 0.6619\nEpoch 4/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.8037 - loss: 0.4314 - val_binary_accuracy: 0.5872 - val_loss: 0.6456\nEpoch 5/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.8624 - loss: 0.3337 - val_binary_accuracy: 0.5825 - val_loss: 0.6261\nEpoch 6/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.8957 - loss: 0.2599 - val_binary_accuracy: 0.5546 - val_loss: 0.6511\nEpoch 7/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9167 - loss: 0.2153 - val_binary_accuracy: 0.6182 - val_loss: 0.6385\nEpoch 8/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9347 - loss: 0.1798 - val_binary_accuracy: 0.6455 - val_loss: 0.6256\nEpoch 9/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9391 - loss: 0.1674 - val_binary_accuracy: 0.6576 - val_loss: 0.6469\nEpoch 10/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9483 - loss: 0.1411 - val_binary_accuracy: 0.7185 - val_loss: 0.5917\nEpoch 11/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9556 - loss: 0.1334 - val_binary_accuracy: 0.7300 - val_loss: 0.6447\nEpoch 12/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9587 - loss: 0.1236 - val_binary_accuracy: 0.7395 - val_loss: 0.6715\nEpoch 13/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step - binary_accuracy: 0.9619 - loss: 0.1097 - val_binary_accuracy: 0.7311 - val_loss: 0.7631\nEpoch 14/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step - binary_accuracy: 0.9618 - loss: 0.1053 - val_binary_accuracy: 0.7584 - val_loss: 0.7673\nEpoch 15/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9681 - loss: 0.0933 - val_binary_accuracy: 0.7511 - val_loss: 0.8070\nEpoch 16/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9671 - loss: 0.0975 - val_binary_accuracy: 0.7526 - val_loss: 0.8432\nEpoch 17/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9593 - loss: 0.1088 - val_binary_accuracy: 0.7568 - val_loss: 0.8782\nEpoch 18/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9731 - loss: 0.0819 - val_binary_accuracy: 0.7558 - val_loss: 0.9312\nEpoch 19/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9657 - loss: 0.0907 - val_binary_accuracy: 0.7516 - val_loss: 0.9343\nEpoch 20/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9716 - loss: 0.0793 - val_binary_accuracy: 0.7637 - val_loss: 0.9570\nEpoch 21/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9734 - loss: 0.0790 - val_binary_accuracy: 0.7684 - val_loss: 0.9917\nEpoch 22/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9706 - loss: 0.0744 - val_binary_accuracy: 0.7568 - val_loss: 1.0507\nEpoch 23/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9682 - loss: 0.0813 - val_binary_accuracy: 0.7637 - val_loss: 1.0575\nEpoch 24/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9679 - loss: 0.0780 - val_binary_accuracy: 0.7642 - val_loss: 1.0834\nEpoch 25/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9702 - loss: 0.0777 - val_binary_accuracy: 0.7736 - val_loss: 1.0669\nEpoch 26/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9722 - loss: 0.0708 - val_binary_accuracy: 0.7600 - val_loss: 1.1098\nEpoch 27/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9732 - loss: 0.0654 - val_binary_accuracy: 0.7626 - val_loss: 1.1392\nEpoch 28/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9737 - loss: 0.0641 - val_binary_accuracy: 0.7637 - val_loss: 1.1570\nEpoch 29/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9738 - loss: 0.0663 - val_binary_accuracy: 0.7715 - val_loss: 1.1310\nEpoch 30/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9717 - loss: 0.0625 - val_binary_accuracy: 0.7663 - val_loss: 1.1543\nEpoch 31/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9775 - loss: 0.0569 - val_binary_accuracy: 0.7658 - val_loss: 1.1908\nEpoch 32/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9706 - loss: 0.0608 - val_binary_accuracy: 0.7684 - val_loss: 1.2178\nEpoch 33/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9737 - loss: 0.0701 - val_binary_accuracy: 0.7726 - val_loss: 1.2144\nEpoch 34/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9687 - loss: 0.0677 - val_binary_accuracy: 0.7616 - val_loss: 1.2431\nEpoch 35/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9720 - loss: 0.0628 - val_binary_accuracy: 0.7600 - val_loss: 1.2592\nEpoch 36/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9702 - loss: 0.0616 - val_binary_accuracy: 0.7679 - val_loss: 1.2272\nEpoch 37/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9702 - loss: 0.0723 - val_binary_accuracy: 0.7673 - val_loss: 1.2097\nEpoch 38/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9773 - loss: 0.0533 - val_binary_accuracy: 0.7652 - val_loss: 1.2210\nEpoch 39/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9768 - loss: 0.0585 - val_binary_accuracy: 0.7616 - val_loss: 1.2713\nEpoch 40/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - binary_accuracy: 0.9743 - loss: 0.0598 - val_binary_accuracy: 0.7637 - val_loss: 1.2524\nEpoch 41/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9770 - loss: 0.0558 - val_binary_accuracy: 0.7610 - val_loss: 1.2426\nEpoch 42/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9754 - loss: 0.0591 - val_binary_accuracy: 0.7563 - val_loss: 1.2809\nEpoch 43/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9755 - loss: 0.0550 - val_binary_accuracy: 0.7553 - val_loss: 1.2912\nEpoch 44/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - binary_accuracy: 0.9763 - loss: 0.0573 - val_binary_accuracy: 0.7605 - val_loss: 1.2850\nEpoch 45/100\n\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 21ms/step - binary_accuracy: 0.9734 - loss: 0.0647 - val_binary_accuracy: 0.7621 - val_loss: 1.2776\n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7d9044783070>"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"my_predictions = model.predict(X_test_vectorized).flatten()\nbinary_predictions = (my_predictions > 0.5).astype(int)\n\nsubmission = pd.DataFrame({'id': test_data['id'],\n                           'target': binary_predictions})\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-06T20:45:35.047260Z","iopub.execute_input":"2025-01-06T20:45:35.047624Z","iopub.status.idle":"2025-01-06T20:45:35.362903Z","shell.execute_reply.started":"2025-01-06T20:45:35.047597Z","shell.execute_reply":"2025-01-06T20:45:35.361738Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m102/102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n","output_type":"stream"}],"execution_count":21}]}